# =============================
# 游깷 CONFIGURACI칍N DE BASE DE DATOS (PostgreSQL en Render)
# =============================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate (JPA) generar치 las tablas si no existen
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# =============================
# 丘뙖잺 CONFIGURACI칍N DEL SERVIDOR
# =============================
# Render asigna din치micamente el puerto (usa esta sintaxis)
server.port=${PORT:8080}

# Oculta la p치gina Whitelabel de error (muestra tu propia vista de error)
server.error.whitelabel.enabled=false

# =============================
# 游꿛 CONFIGURACI칍N DE THYMELEAF
# =============================
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false  # 칰til en desarrollo (puedes poner true en producci칩n)

# =============================
# 游닇 LOGGING
# =============================
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG

# Muestra los valores de los par치metros SQL (muy detallado, 칰salo solo para debug)
logging.level.org.hibernate.type.descriptor.sql=TRACE
