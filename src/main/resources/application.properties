# =============================
# üåê CONFIGURACI√ìN DE BASE DE DATOS (PostgreSQL en Render)
# =============================
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USER}
spring.datasource.password=${DB_PASS}
spring.datasource.driver-class-name=org.postgresql.Driver

# Hibernate (JPA) generar√° las tablas si no existen
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.properties.hibernate.format_sql=true

# =============================
# ‚öôÔ∏è CONFIGURACI√ìN DEL SERVIDOR
# =============================
server.port=${PORT:8080}   # ‚úÖ Render asigna din√°micamente el puerto (usa esta sintaxis)
server.error.whitelabel.enabled=false  # ‚úÖ Oculta la fea p√°gina Whitelabel de error

# =============================
# üé® CONFIGURACI√ìN DE THYMELEAF
# =============================
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
spring.thymeleaf.mode=HTML
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.cache=false  # ‚úÖ √∫til en desarrollo (puedes poner true en producci√≥n)

# =============================
# üìù LOGGING
# =============================
logging.level.root=INFO
logging.level.org.springframework.web=INFO
logging.level.org.hibernate.SQL=DEBUG
logging.level.org.hibernate.type.descriptor.sql=TRACE  # Muestra valores de los par√°metros
